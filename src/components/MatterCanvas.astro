<div class="z-10 relative" id="matter-container">
  <canvas class="w-full h-screen" id="matter-canvas"></canvas>
</div>

<script>
  import "pathseg";
  import decomp from "poly-decomp";
  import Matter, { Common } from "matter-js";
  const {
    Engine,
    Render,
    World,
    Bodies,
    Body,
    Events,
    Mouse,
    MouseConstraint,
    Svg,
  } = Matter;

  const engine = Engine.create({
    gravity: { x: 0, y: 0, scale: 0.0 },
  });
  Common.setDecomp(decomp);
  const matterContainer = document.getElementById("matter-container");
  const matterCanvas = document.getElementById("matter-canvas");
  const render = Render.create({
    canvas: matterCanvas,
    engine: engine,
    options: {
      wireframes: false,
      width: window.innerWidth,
      height: window.innerHeight,
      background: "transparent",
    },
  });

  var containerWidth = matterContainer!.clientWidth;
  var containerHeight = matterContainer!.clientHeight;

  const boxes = [];

  for (let i = 0; i < 250; i++) {
    boxes.push(
      Bodies.rectangle(
        Math.random() * matterContainer!.clientWidth,
        Math.random() * matterContainer!.clientWidth,
        containerHeight * 0.04,
        containerHeight * 0.04,
        {
          render: {
            sprite: {
              xScale: containerHeight / 1000,
              yScale: containerHeight / 1000,
              texture: Matter.Common.choose([
                "./svg/music-double-note.svg",
                "./svg/music-note.svg",
              ]),
            },
            opacity: 0.5,
          },
        }
      )
    );
  }
  //   const box = Bodies.rectangle(200, 200, 80, 80);

  const tbox = Bodies.rectangle(
    containerWidth / 2,
    containerHeight / 2,
    containerWidth * 0.6,
    containerHeight * 0.6,
    {
      render: {
        opacity: 0,
      },
      isStatic: true,
    }
  );
  World.add(engine.world, tbox);
  // Update wall positions based on container size
  const ground = Bodies.rectangle(
    containerWidth / 2,
    containerHeight,
    containerWidth,
    50,
    {
      isStatic: true,
      render: { opacity: 0 },
    }
  );
  const ceiling = Bodies.rectangle(containerWidth / 2, 0, containerWidth, 50, {
    isStatic: true,
    render: { opacity: 0 },
  });
  const leftWall = Bodies.rectangle(
    0,
    containerHeight / 2,
    50,
    containerHeight,
    {
      isStatic: true,
      render: { opacity: 0 },
    }
  );
  const rightWall = Bodies.rectangle(
    containerWidth,
    containerHeight / 2,
    50,
    containerHeight,
    {
      isStatic: true,
      render: { opacity: 0 },
    }
  );

  World.add(engine.world, [ground, ceiling, leftWall, rightWall]);

  function resizeWalls(matterContainer) {
    var newContainerWidth = matterContainer.clientWidth;
    var newContainerHeight = matterContainer.clientHeight;

    render.canvas.width = newContainerWidth;
    render.canvas.height = newContainerHeight;

    Matter.Body.setPosition(ground, {
      x: newContainerWidth / 2,
      y: newContainerHeight,
    });

    Matter.Body.setPosition(ceiling, {
      x: newContainerWidth / 2,
      y: 0,
    });

    Matter.Body.scale(ground, newContainerWidth / containerWidth, 1);
    Matter.Body.scale(ceiling, newContainerWidth / containerWidth, 1);

    Matter.Body.setPosition(leftWall, {
      x: 0,
      y: newContainerHeight / 2,
    });

    Matter.Body.setPosition(rightWall, {
      x: newContainerWidth,
      y: newContainerHeight / 2,
    });
    Matter.Body.setPosition(tbox, {
      x: newContainerWidth / 2,
      y: newContainerHeight / 2,
    });
    containerWidth = newContainerWidth;
    containerHeight = newContainerHeight;
  }

  window.addEventListener("resize", () => resizeWalls(matterContainer!));
  World.add(engine.world, boxes);
  // Create a mouse
  const mouse = Mouse.create(render.canvas);
  //   const mouseConstraint = MouseConstraint.create(engine, {
  //     mouse: mouse,
  //     constraint: {
  //       render: { visible: false },
  //     },
  //   });

  //   World.add(engine.world, mouseConstraint);

  // Listen for mouse movements
  Events.on(engine, "beforeUpdate", () => {
    const mouseX = mouse.position.x;
    const mouseY = mouse.position.y;

    boxes.forEach((box) => {
      const distanceX = mouseX - box.position.x;
      const distanceY = mouseY - box.position.y;

      const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);

      // Apply repulsion force when the mouse is near the box
      if (distance < 100) {
        const repulsionMagnitude = 0.0005;
        const repulsionX = -distanceX * repulsionMagnitude;
        const repulsionY = -distanceY * repulsionMagnitude;

        Matter.Body.applyForce(box, box.position, {
          x: repulsionX,
          y: repulsionY,
        });
      }
    });
  });
  Matter.Runner.run(engine);
  Render.run(render);
</script>
