<div
  class="bg-transparent w-full h-screen overflow-hidden"
  id="matter-container"
>
  <canvas class="-z-10 w-full" id="matter-canvas"></canvas>
</div>

<script>
  import Matter from "matter-js";
  const { Engine, Render, World, Bodies, Body, Events, Mouse } = Matter;

  const engine = Engine.create({
    gravity: { scale: 0.0005 },
  });

  const matterContainer = document.getElementById("matter-container")!;
  const matterCanvas = document.getElementById(
    "matter-canvas"
  ) as HTMLCanvasElement;
  var containerWidth = matterContainer?.clientWidth;
  var containerHeight = matterContainer?.clientHeight;
  const render = Render.create({
    canvas: matterCanvas,
    engine: engine,
    options: {
      pixelRatio: window.devicePixelRatio,
      showSleeping: false,
      wireframes: false,
      width: matterContainer.clientWidth,
      height: matterContainer.clientHeight,
      background: "transparent",
      wireframeBackground: "transparent",
    },
  });

  const bodies: Matter.Body[] = [];

  for (let i = 0; i < 250; i++) {
    const newBody = Bodies.rectangle(
      Math.random() * containerWidth,
      Math.random() * containerHeight,
      containerHeight * 0.035,
      containerHeight * 0.035,
      {
        render: {
          sprite: {
            xScale: containerHeight / 750,
            yScale: containerHeight / 750,
            texture: Matter.Common.choose([
              "./svg/music-double-note.svg",
              "./svg/music-note.svg",
              "./svg/music-note-1.svg",
              "./svg/music-note-2.svg",
            ]),
          },
          //   fillStyle: "#64748b",
        },
        frictionStatic: 10,
        friction: 0.5,
        density: 0.003,
      }
    );
    Body.rotate(newBody, Math.random() * Math.PI);
    bodies.push(newBody);
  }

  const tbox = Bodies.rectangle(
    containerWidth / 2,
    containerHeight / 3 / 2,
    containerWidth * 0.6,
    containerHeight * 1.1,
    {
      render: {
        opacity: 0,
        fillStyle: "red",
      },
      isStatic: true,
    }
  );
  World.add(engine.world, tbox);
  // Update wall positions based on container size
  const ground = Bodies.rectangle(
    containerWidth / 2,
    containerHeight,
    10000,
    50,
    {
      isStatic: true,
      render: { opacity: 0 },
    }
  );
  const ceiling = Bodies.rectangle(containerWidth / 2, 0, 10000, 50, {
    isStatic: true,
    render: { opacity: 0 },
  });
  const leftWall = Bodies.rectangle(
    -25,
    containerHeight / 2,
    50,
    containerHeight,
    {
      isStatic: true,
      render: { opacity: 0 },
    }
  );
  const rightWall = Bodies.rectangle(
    containerWidth + 25,
    containerHeight / 2,
    50,
    containerHeight,
    {
      isStatic: true,
      render: { opacity: 0 },
    }
  );

  World.add(engine.world, [ground, ceiling, leftWall, rightWall]);
  //   var newContainerWidth = matterContainer!.clientWidth;
  //   var newContainerHeight = matterContainer!.clientHeight;

  function resizeWalls(matterContainer: HTMLElement) {
    // console.log(matterContainer!.clientWidth, matterContainer!.clientHeight);

    render.options.width = matterContainer.clientWidth;
    render.options.height = matterContainer.clientHeight;
    render.canvas.width = matterContainer.clientWidth;
    render.canvas.height = matterContainer.clientHeight;

    Matter.Body.setPosition(ground, {
      x: matterContainer.clientWidth / 2,
      y: matterContainer.clientHeight,
    });

    Matter.Body.setPosition(ceiling, {
      x: matterContainer.clientWidth / 2,
      y: 0,
    });

    Matter.Body.setPosition(leftWall, {
      x: -25,
      y: matterContainer.clientHeight / 2,
    });

    Matter.Body.setPosition(rightWall, {
      x: matterContainer.clientWidth + 25,
      y: matterContainer.clientHeight / 2,
    });
    Matter.Body.setPosition(tbox, {
      x: matterContainer.clientWidth / 2,
      y: matterContainer.clientHeight / 3 / 2,
    });
    Matter.Render.setPixelRatio(render, window.devicePixelRatio);
  }

  window.addEventListener("resize", () => resizeWalls(matterContainer!));
  World.add(engine.world, bodies);
  // Create a mouse
  const mouse = Mouse.create(render.canvas);
  //   const mouseConstraint = MouseConstraint.create(engine, {
  //     mouse: mouse,
  //     constraint: {
  //       render: { visible: false },
  //     },
  //   });

  //   World.add(engine.world, mouseConstraint);

  // Listen for mouse movements
  Events.on(engine, "beforeUpdate", () => {
    const mouseX = mouse.position.x;
    const mouseY = mouse.position.y;

    bodies.forEach((box) => {
      const distanceX = mouseX - box.position.x;
      const distanceY = mouseY - box.position.y;

      const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);

      // Apply repulsion force when the mouse is near the box
      if (distance < 100) {
        const repulsionMagnitude = 0.0002;
        const repulsionX = -distanceX * repulsionMagnitude;
        const repulsionY = -distanceY * repulsionMagnitude;

        Matter.Body.applyForce(box, box.position, {
          x: repulsionX,
          y: repulsionY,
        });
      }
    });
  });
  Matter.Runner.run(engine);
  Render.run(render);
</script>
